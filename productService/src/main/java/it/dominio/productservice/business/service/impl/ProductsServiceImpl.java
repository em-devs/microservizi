/*
 * Created on 2018-04-21 ( Time 16:57:39 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */
package it.dominio.productservice.business.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import it.dominio.productservice.business.service.ProductsService;
import it.dominio.productservice.business.service.mapping.ProductsServiceMapper;
import it.dominio.productservice.business.transport.ProductsDTO;
import it.dominio.productservice.data.entities.Products;
import it.dominio.productservice.data.repository.ProductsEntityRepository;

/**
 * Implementation of ProductsEntityService
 */
@Component
@Transactional
public class ProductsServiceImpl implements ProductsService {
	
	@Resource
	private ProductsEntityRepository productsEntityRepository;

	@Resource
	private ProductsServiceMapper productsServiceMapper;
	
	@Override
	public ProductsDTO findById(Long productId) {
		Optional<Products> optionalProductsEntity = productsEntityRepository.findById(productId);
		Products productsEntity = optionalProductsEntity.get();
		return productsServiceMapper.mapProductsEntityToProducts(productsEntity);
	}

	@Override
	public List<ProductsDTO> findAll() {
		Iterable<Products> entities = productsEntityRepository.findAll();
		List<ProductsDTO> beans = new ArrayList<ProductsDTO>();
		for(Products productsEntity : entities) {
			beans.add(productsServiceMapper.mapProductsEntityToProducts(productsEntity));
		}
		return beans;
	}

	@Override
	public ProductsDTO save(ProductsDTO products) {
		return update(products) ;
	}

	@Override
	public ProductsDTO create(ProductsDTO products) {
		Optional<Products> optionalProductsEntity = productsEntityRepository.findById(products.getProductId());
		Products productsEntity = optionalProductsEntity.get();
		if( productsEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		productsEntity = new Products();
		productsServiceMapper.mapProductsToProductsEntity(products, productsEntity);
		Products productsEntitySaved = productsEntityRepository.save(productsEntity);
		return productsServiceMapper.mapProductsEntityToProducts(productsEntitySaved);
	}

	@Override
	public ProductsDTO update(ProductsDTO products) {
		Optional<Products> optionalProductsEntity = productsEntityRepository.findById(products.getProductId());
		Products productsEntity = optionalProductsEntity.get();
		productsServiceMapper.mapProductsToProductsEntity(products, productsEntity);
		Products productsEntitySaved = productsEntityRepository.save(productsEntity);
		return productsServiceMapper.mapProductsEntityToProducts(productsEntitySaved);
	}

	@Override
	public void delete(Long productId) {
		productsEntityRepository.deleteById(productId);
	}

	public ProductsEntityRepository getProductsEntityRepository() {
		return productsEntityRepository;
	}

	public void setProductsEntityRepository(ProductsEntityRepository productsEntityRepository) {
		this.productsEntityRepository = productsEntityRepository;
	}

	public ProductsServiceMapper getProductsServiceMapper() {
		return productsServiceMapper;
	}

	public void setProductsServiceMapper(ProductsServiceMapper productsServiceMapper) {
		this.productsServiceMapper = productsServiceMapper;
	}

}
